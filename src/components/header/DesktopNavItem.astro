---
type Props = {
  href: string
}

const { href } = Astro.props
---

<li>
  <desktop-navitem>
    <a href={href} class:list={['relative block px-3 py-2 transition']}>
      <slot />
      <span
        class="hidden absolute inset-x-1 -bottom-px h-px bg-gradient-to-r from-teal-500/0 via-teal-500/40 to-teal-500/0 dark:from-teal-400/0 dark:via-teal-400/40 dark:to-teal-400/0"
      ></span>
    </a>
  </desktop-navitem>
</li>

<script>
  class DesktopNavItem extends HTMLElement {
    constructor() {
      super()

      const link = this.querySelector('a')
      const highlight = this.querySelector('span')
      if (!link || !highlight) {
        throw new Error('Link and highlight elements are required')
      }

      this.handleHighlight(link, highlight)

      document.addEventListener('astro:after-swap', () => {
        this.handleHighlight(link, highlight)
      })
    }

    handleHighlight(link: HTMLAnchorElement, highlight: HTMLSpanElement) {
      const href = new URL(link.href).pathname
      const isActive = window.location.pathname === href

      const addHighlight = () => {
        link.classList.add('text-teal-700')
        link.classList.add('dark:text-teal-400')
        highlight.classList.remove('hidden')
      }

      const removeHighlight = () => {
        link.classList.remove('text-teal-700')
        link.classList.remove('dark:text-teal-400')
        highlight.classList.add('hidden')
      }

      if (isActive) {
        addHighlight()
      } else {
        link.classList.toggle('hover:text-teal-700')
        link.classList.toggle('dark:hover:text-teal-400')
        removeHighlight()
      }
    }
  }
  customElements.define('desktop-navitem', DesktopNavItem)
</script>
