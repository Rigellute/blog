---
import type { HTMLTag, Polymorphic } from 'astro/types'

const variantStyles = {
  primary:
    'bg-zinc-800 font-semibold text-zinc-100 hover:bg-zinc-700 active:bg-zinc-800 active:text-zinc-100/70 dark:bg-zinc-700 dark:hover:bg-zinc-600 dark:active:bg-zinc-700 dark:active:text-zinc-100/70',
  secondary:
    'bg-zinc-50 font-medium text-zinc-900 hover:bg-zinc-100 active:bg-zinc-100 active:text-zinc-900/60 dark:bg-zinc-800/50 dark:text-zinc-300 dark:hover:bg-zinc-800 dark:hover:text-zinc-50 dark:active:bg-zinc-800/50 dark:active:text-zinc-50/70',
}

type Props<Tag extends HTMLTag> = Polymorphic<{
  as?: Tag
  variant?: keyof typeof variantStyles
}>

const { variant, class: className, as: Tag = 'button', ...props } = Astro.props

const style =
  variant === 'secondary' ? variantStyles.secondary : variantStyles.primary
---

<Tag
  class:list={[
    'inline-flex items-center gap-2 justify-center rounded-md py-2 px-3 text-sm outline-offset-2 transition active:transition-none',
    style,
    className,
  ]}
  {...props}
>
  <slot />
</Tag>
